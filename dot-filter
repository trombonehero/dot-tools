#!env python

import argparse
import collections
import itertools
import re
import sys

argparser = argparse.ArgumentParser(description=
'''Filter paths from a .dot graph that do not end in specified nodes.''')

files = argparser.add_argument_group('Files')
files.add_argument('filename', help='.dot file to filter')
files.add_argument('-i', '--intersect', action='store_true',
	help='Find the intersection of ancestors ^ dependents')
files.add_argument('-o', '--outfile', metavar='OUT', default='-',
	help='Filtered output (.dot file)')

functions = argparser.add_argument_group('Functions')
functions.add_argument('--ancestors-of', type=str, nargs='*', default = [],
		help='Include these nodes and their ancestors')
functions.add_argument('--descendents-of', type=str, nargs='*', default = [],
		help='Include these nodes and their descendents')
functions.add_argument('--ignore', metavar='node', help='''
		Always ignore these nodes (e.g. the "external node" that is always
		generated by LLVM's opt -dot-callgraph)''',
		nargs='*', default=['external node'])

syscall_groups = [
	('file', 'Add file-related syscalls (open, mmap, stat...) to target list',
		[
			'open', 'openat', 'mmap',
			'opendir', 'closedir', 'readdir', 'mkdir',
			'stat', 'fstat', 'fstatat', 'lstat', 'fstatfs'
			'chmod', 'fchmod', 'ftruncate',
			'futimes',
			'close'
		]
	),
	('io', 'Add IO-related syscalls (read, write, aio_*...) to target list',
		[
			'read', 'write',
			'ioctl',
			'aio_read', 'aio_write', 'aio_cancel', 'aio_suspend',
			'aio_error', 'aio_return', 'aio_waitcomplete'
		]
	),
	('kernel', 'Add kldload, syctl, etc. to target list',
		[
			'kldfind', 'kldstat', 'kldsym', 'kldload', 'kldunload',
			'modfind', 'modfnext', 'modnext',
			'sysctl'
		]
	),
	('proc', 'Add fork, execve... to target list',
		[
			'fork', 'vfork', 'rfork',
			'execve', 'fexecve', 'exit', '_exit'
		]
	)
]

for (flag, message, syscalls) in syscall_groups:
	functions.add_argument('--%s' % flag, action='store_true', help=message)

args = argparser.parse_args()


# Regular expressions for edges and nodes, etc.
edge = re.compile('\s*(.+)\s*->\s*(.+);')
labeled_node = re.compile('\s*("?[A-Za-z0-9_ ]+"?)\s\[(.*label.*)\];$')
attributes = re.compile('\s*([A-Za-z]+\s*=\s*[^,]+,)+')
quoted = re.compile('^"(.*)"$')

# Nodes that we want to ignore.
ignore = set()

# Read in the graph.
def blank_node(): return { 'from': set(), 'to': set() }
nodes = collections.defaultdict(blank_node)
names = {}

preamble = ''
postamble = ''

def unquote(s):
	s = s.strip()

	if quoted.match(s):
		return s[1:-1]

	return s


for line in open(args.filename, 'r'):
	if edge.match(line):
		(b, e) = [ unquote(x.strip()) for x in edge.match(line).groups() ]
		(begin, end) = (nodes[b], nodes[e])

		begin['to'].add(e)
		end['from'].add(b)

	elif labeled_node.match(line):
		(name, attrs) = labeled_node.match(line).groups()
		name = unquote(name)

		attrs = [
			x[:-1].split('=')
			for x in attributes.findall(attrs + ',')
		]

		attrs = dict([
			(k.strip(), unquote(v.strip()))
			for (k,v) in attrs
		])

		if 'label' not in attrs:
			raise ValueError('no label in %s' % attrs)

		nodes[name].update(attrs)

		label = attrs['label']
		names[label] = name
		if args.ignore and label in args.ignore:
			ignore.add(name)

	elif len(line.strip()) == 0:
		pass

	elif len(nodes) == 0:
		preamble += line

	else:
		postamble += line


print 'Read graph with', len(nodes), 'nodes'


# Find all ancestors of a node (that we don't already know about).
def get_ancestors(name, ancestors):
	ancestors.add(name)
	node = nodes[name]

	for predecessor in node['from']:
		node = nodes[predecessor]

		if predecessor in ancestors: continue
		if predecessor in ignore: continue

		get_ancestors(predecessor, ancestors)

	return ancestors

# Find all descendents of a node (that we don't already know about).
def get_descendents(name, descendents):
	descendents.add(name)
	node = nodes[name]

	for successor in node['to']:
		node = nodes[successor]

		if successor in descendents: continue
		if successor in ignore: continue

		get_descendents(successor, descendents)

	return descendents



# Ancestor nodes that we want to keep.
ancestors = set()
if args.ancestors_of:
	for target in args.ancestors_of:
		get_ancestors(target, ancestors)

	count = len(ancestors) - len(args.ancestors_of)
	print 'Keeping', count, 'ancestors of', ', '.join(args.ancestors_of)

# Descendent nodes that we want to keep.
descendents = set()
if args.descendents_of:
	for target in args.descendents_of:
		get_descendents(target, descendents)

	count = len(descendents) - len(args.descendents_of)
	print 'Keeping', count, 'descendents of', ', '.join(args.descendents_of)

targets = {
	'ancestors': {},
	'descendents': {}
}

# We also want to find the ancestors of syscalls.
syscalls = {}
for (flag, message, calls) in syscall_groups:
	group = set()

	if args.__getattribute__(flag):
		for call in calls:
			if call in names:
				group.add(call)
				get_ancestors(names[call], ancestors)

	if len(group) > 0:
		syscalls[flag] = group



# All the nodes to keep: either the union or the intersection.
if args.intersect: keep = ancestors.intersection(descendents)
else: keep = ancestors.union(descendents)



# Set up colours for syscall groups.
scheme = 'pastel19'
colour = itertools.cycle([ '/%s/%d' % (scheme, i) for i in range(1,9) ])

for (group, calls) in syscalls.items():
	syscalls[group] = (calls, next(colour))


# Colours for user-specified targets.
scheme = 'dark27'
colour = itertools.cycle([ '/%s/%d' % (scheme, i) for i in range(1,7) ])

# Set up node attributes (e.g. colour).
for name in keep:
	node = nodes[name]

	if 'label' not in node: continue
	label = node['label']

	if label in args.ancestors_of or label in args.descendents_of:
		node['style'] = 'bold,filled'
		node['fillcolor'] = next(colour)

	for (group, (calls, syscolour)) in syscalls.items():
		if label in calls:
			node['style'] = 'bold,filled'
			node['fillcolor'] = syscolour

	for successor in node['to']:
		if successor not in keep: continue

		n = nodes[successor]
		if 'label' not in n: continue

		color = n['fillcolor'] if 'fillcolor' in n else '#00000033'


# Write the filtered callgraph.
if args.outfile == '-': out = sys.stdout
else: out = open(args.outfile, 'w')

def attribute_list(attrs):
	""" Convert a Python dictionary to a .dot attribute list. """
	return '[%s]' % ','.join([ '%s="%s"' % (a,attrs[a]) for a in attrs])

out.write(preamble)

for name in keep:
	node = nodes[name]
	if 'label' not in node: continue

	attrs = dict([
		(a, node[a]) for a in node if a not in [ 'to', 'from' ]
	])

	out.write('\t"%s" %s;\n' % (name, attribute_list(attrs)))

	for successor in node['to']:
		if successor not in keep: continue

		s = nodes[successor]
		if 'label' not in s: continue

		if 'fillcolor' in node: color = node['fillcolor']
		elif 'fillcolor' in s: color = s['fillcolor']
		else: color = '#00000033'

		attrs = attribute_list({ 'color': color })
		out.write('\t"%s" -> "%s" %s;\n' % (name, successor, attrs))

	out.write('\n')

out.write(postamble)

